@page "/"
@using System.Text
@using Newtonsoft.Json
@using UrlShortener.Client.DTOs
@inject IJSRuntime JS

<PageTitle>Shortener URL</PageTitle>

<div class="page-container text-center">
    <h3 class="text-white mb-5">
        Create clean, professional short links that are perfect for sharing across social media, emails, and marketing campaigns.
    </h3>

    <div class="url-box mx-auto mb-4">
        <input class="form-control mb-3 input-url" @bind-value="longUrl" type="text" placeholder="Paste your long URL here..." />
        <button class="btn-shorten w-100" @onclick="ShortenUrl">
            <Icon Name="IconName.Link45Deg" Size="IconSize.x4" Color="IconColor.White" />
            Shorten URL
        </button>
    </div>


    @if (!string.IsNullOrEmpty(shortUrl))
    {
        <div class="short-url-box d-flex justify-content-center">
            <div class="shorturl-box d-flex align-items-center">
                <h5 class="short-url-r text-white align-text-center">@shortUrl</h5>
                <button Class="btn-short-url" title="Copy to Clipboard"
                        @onclick="CopyToClipboard">
                    <Icon Name="IconName.Link45Deg" Size="IconSize.x6" Color="IconColor.White" />
                </button>
                <a Class="btn-short-url" title="Go to site" target="_blank" href="@longUrl">
                    <Icon Name="IconName.BoxArrowRight" Size="IconSize.x6" Color="IconColor.White" />
                </a>
            </div>
        </div>
    }

    <div class="features-container d-flex justify-content-center gap-5 pb-2">
        <div class="feature-box text-center">
            <Icon Name="IconName.LightningChargeFill" Size="IconSize.x3" Color="IconColor.White" />
            <h5 class="text-white mt-3">Lightning Fast</h5>
            <p class="text-secondary small">Generate short links instantly with our optimized infrastructure</p>
        </div>

        <div class="feature-box text-center">
            <Icon Name="IconName.GraphUp" Size="IconSize.x3" Color="IconColor.White" />
            <h5 class="text-white mt-3">Analytics</h5>
            <p class="text-secondary small">Track clicks, locations, and performance of your short links</p>
        </div>

        <div class="feature-box text-center">
            <Icon Name="IconName.ShieldShaded" Size="IconSize.x3" Color="IconColor.White" />
            <h5 class="text-white mt-3">Secure</h5>
            <p class="text-secondary small">Enterprise-grade security with SSL encryption and spam protection</p>
        </div>
    </div>
</div>

@if (copied)
{
    <Alert Color="AlertColor.Success"> <Icon Name="IconName.CheckCircleFill" class="me-2"></Icon>URL copied to clipboard </Alert>
}

@code {
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] IConfiguration? configuration { get; set; }
    [Inject] NavigationManager? navigationManager { set; get; }

    private string Url = string.Empty;
    private string longUrl = string.Empty;
    private string shortUrl = string.Empty;
    private bool copied = false;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async Task ShortenUrl()
    {
        try
        {
            if (string.IsNullOrEmpty(longUrl))
                return;

            Url = $"{GetUrlBaseApi()}{Constants.SHORTEN_URL}";

            using StringContent content = new(JsonConvert.SerializeObject(new { LongUrl = longUrl }), Encoding.UTF8, "application/json");
            var response = await httpClient!.PostAsync(Url, content);
            response.EnsureSuccessStatusCode();
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<ShortUrlResponseDto>(responseContent);
            shortUrl = result?.ShortUrl ?? string.Empty;

            await GoToSite();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task GoToSite()
    {
        try
        {
            var codeUrl = shortUrl.Split('/').Last();
            Url = $"{GetUrlBaseApi()}{Constants.BASE_SCHEME}{codeUrl}";

            var response = await httpClient!.GetAsync(Url);
            response.EnsureSuccessStatusCode();
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<LongUrlResponseDto>(responseContent);
            longUrl = result?.LongUrl ?? string.Empty;

            if (shortUrl is not null) longUrl = string.Empty;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task CopyToClipboard()
    {
        copied = true;
        await JS.InvokeVoidAsync("copyContent", shortUrl);
        Clean();
    }

    private string GetUrlBaseApi() => configuration?["UrlBases:API"]!;

    private void Clean()
    {
        longUrl = string.Empty;
        copied = false;
        StateHasChanged();
    }
}